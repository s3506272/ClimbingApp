// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClimbingApp.Migrations
{
    [DbContext(typeof(ClimbAppContext))]
    [Migration("20200818094237_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClimbingApp.Models.AllStats", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HangEdge")
                        .HasColumnType("int");

                    b.Property<int>("HangWeight")
                        .HasColumnType("int");

                    b.Property<int>("HighestBoulderingGrade")
                        .HasColumnType("int");

                    b.Property<int>("HighestSportGrade")
                        .HasColumnType("int");

                    b.Property<int>("PullUps")
                        .HasColumnType("int");

                    b.Property<int>("PushUps")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserID1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("UserID1");

                    b.ToTable("AllStats");
                });

            modelBuilder.Entity("ClimbingApp.Models.Boulder", b =>
                {
                    b.Property<int>("BoulderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BoulderingClimbingGrade")
                        .HasColumnType("int");

                    b.Property<int>("ConsensusGrade")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoulderID");

                    b.ToTable("Boulders");
                });

            modelBuilder.Entity("ClimbingApp.Models.BoulderAverage", b =>
                {
                    b.Property<int>("BoulderAverageID")
                        .HasColumnType("int");

                    b.Property<int>("HangEdge")
                        .HasColumnType("int");

                    b.Property<int>("HangWeight")
                        .HasColumnType("int");

                    b.Property<int>("PullUps")
                        .HasColumnType("int");

                    b.Property<int>("PushUps")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("BoulderAverageID");

                    b.ToTable("BoulderAverage");
                });

            modelBuilder.Entity("ClimbingApp.Models.HangEdge", b =>
                {
                    b.Property<int>("HangEdgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NHangEdge")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StatID")
                        .HasColumnType("int");

                    b.HasKey("HangEdgeID");

                    b.HasIndex("StatID");

                    b.ToTable("HangEdges");
                });

            modelBuilder.Entity("ClimbingApp.Models.HangWeight", b =>
                {
                    b.Property<int>("HangWeightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NHangWeight")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StatID")
                        .HasColumnType("int");

                    b.HasKey("HangWeightID");

                    b.HasIndex("StatID");

                    b.ToTable("HangWeights");
                });

            modelBuilder.Entity("ClimbingApp.Models.PullUp", b =>
                {
                    b.Property<int>("PullUpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NPullUps")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StatID")
                        .HasColumnType("int");

                    b.HasKey("PullUpID");

                    b.HasIndex("StatID");

                    b.ToTable("PullUps");
                });

            modelBuilder.Entity("ClimbingApp.Models.PushUp", b =>
                {
                    b.Property<int>("PushUpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NPushUps")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StatID")
                        .HasColumnType("int");

                    b.HasKey("PushUpID");

                    b.HasIndex("StatID");

                    b.ToTable("PushUps");
                });

            modelBuilder.Entity("ClimbingApp.Models.Sport", b =>
                {
                    b.Property<int>("SportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConsensusGrade")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportClimbingGrade")
                        .HasColumnType("int");

                    b.HasKey("SportID");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("ClimbingApp.Models.SportAverage", b =>
                {
                    b.Property<int>("SportAverageID")
                        .HasColumnType("int");

                    b.Property<int>("HangEdge")
                        .HasColumnType("int");

                    b.Property<int>("HangWeight")
                        .HasColumnType("int");

                    b.Property<int>("PullUps")
                        .HasColumnType("int");

                    b.Property<int>("PushUps")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SportAverageID");

                    b.ToTable("SportAverage");
                });

            modelBuilder.Entity("ClimbingApp.Models.Stat", b =>
                {
                    b.Property<int>("StatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HangEdgeID")
                        .HasColumnType("int");

                    b.Property<int?>("HangWeightID")
                        .HasColumnType("int");

                    b.Property<int>("HighestBoulderingGrade")
                        .HasColumnType("int");

                    b.Property<int>("HighestSportGrade")
                        .HasColumnType("int");

                    b.Property<int?>("PullUpID")
                        .HasColumnType("int");

                    b.Property<int?>("PushUpID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StatID");

                    b.HasIndex("HangEdgeID");

                    b.HasIndex("HangWeightID");

                    b.HasIndex("PullUpID");

                    b.HasIndex("PushUpID");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("ClimbingApp.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApeIndex")
                        .HasColumnType("int");

                    b.Property<int?>("BoulderID")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SportID")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("BoulderID");

                    b.HasIndex("SportID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClimbingApp.Models.AllStats", b =>
                {
                    b.HasOne("ClimbingApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID1");
                });

            modelBuilder.Entity("ClimbingApp.Models.HangEdge", b =>
                {
                    b.HasOne("ClimbingApp.Models.Stat", "Stat")
                        .WithMany("UserHangEdges")
                        .HasForeignKey("StatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimbingApp.Models.HangWeight", b =>
                {
                    b.HasOne("ClimbingApp.Models.Stat", "Stat")
                        .WithMany("UserHangWeights")
                        .HasForeignKey("StatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimbingApp.Models.PullUp", b =>
                {
                    b.HasOne("ClimbingApp.Models.Stat", "Stat")
                        .WithMany("UserPullUPs")
                        .HasForeignKey("StatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimbingApp.Models.PushUp", b =>
                {
                    b.HasOne("ClimbingApp.Models.Stat", "Stat")
                        .WithMany("UserPushUps")
                        .HasForeignKey("StatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClimbingApp.Models.Stat", b =>
                {
                    b.HasOne("ClimbingApp.Models.HangEdge", "HangEdge")
                        .WithMany()
                        .HasForeignKey("HangEdgeID");

                    b.HasOne("ClimbingApp.Models.HangWeight", "HangWeight")
                        .WithMany()
                        .HasForeignKey("HangWeightID");

                    b.HasOne("ClimbingApp.Models.PullUp", "PullUp")
                        .WithMany()
                        .HasForeignKey("PullUpID");

                    b.HasOne("ClimbingApp.Models.PullUp", "PushUp")
                        .WithMany()
                        .HasForeignKey("PushUpID");

                    b.HasOne("ClimbingApp.Models.User", "User")
                        .WithOne("Stat")
                        .HasForeignKey("ClimbingApp.Models.Stat", "UserID");
                });

            modelBuilder.Entity("ClimbingApp.Models.User", b =>
                {
                    b.HasOne("ClimbingApp.Models.Boulder", null)
                        .WithMany("Users")
                        .HasForeignKey("BoulderID");

                    b.HasOne("ClimbingApp.Models.Sport", null)
                        .WithMany("Users")
                        .HasForeignKey("SportID");
                });
#pragma warning restore 612, 618
        }
    }
}
